import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from keras.models import Sequential
from keras.layers import Conv2D,Dense,Flatten,Dropout,MaxPooling2D
from keras.optimizers import Adam

# Read in the csv files
train_df = pd.read_csv('fashion-mnist_train.csv')
test_df = pd.read_csv('fashion-mnist_test.csv')

# Convert to numpy arrays
train_data = np.asarray(train_df,dtype=np.float32)
test_data = np.asarray(test_df,dtype=np.float32)

# Divide into xtrain, xtest and the labels ytrain and ytest
x_train = train_data[:,1:]/255
y_train = train_data[:,0]
x_test = test_data[:,1:]/255
y_test = test_data[:,0]

# Divide training data into training and validation sets
x_train,x_val,y_train,y_val = train_test_split(x_train,y_train,test_size=.25,random_state=2345)

# x_train was 45000 images and each image was 784x1
# Convert to 45000 images of 28x28x1 (greyscale)
x_train = x_train.reshape(x_train.shape[0],28,28,1)
x_test = x_test.reshape(x_test.shape[0],28,28,1)
x_val = x_val.reshape(x_val.shape[0],28,28,1)

# Set model parameters



model = Sequential([
        # Conv 2D layer has 32 filters, Kernel size (3,3), Activation="relu"
        Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
        # Max pooling size is (2,2)
        MaxPooling2D((2,2)),
        Conv2D(64, (3,3), activation='relu'),
        MaxPooling2D((2,2)),
        Conv2D(64, (3,3), activation='relu'),
        Flatten(),
        Dense(64, activation='relu'),
        Dense(10, activation='softmax')
])

# Set model compiler and optimizer
model.compile(loss='sparse_categorical_crossentropy',optimizer=Adam(learning_rate=0.001),metrics=['accuracy'])

# Train the model
hist = model.fit(x_train,y_train,batch_size=6000,epochs=15,verbose=1,validation_data=(x_val,y_val))
print("Training Done")

# Test the model
score = model.evaluate(x_test,y_test,verbose=0)
print('Test Loss : {:.4f}'.format(score[0]))
print('Test accuracy : {:.4f}'.format(score[1]))

# Print classification report
predicted_prob = model.predict(x_test)
predicted_classes = np.argmax(predicted_prob,axis=1)
class_names = ['T_shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

print(classification_report(y_test,predicted_classes,target_names=class_names))